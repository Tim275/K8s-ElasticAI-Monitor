KEY_NAME="newEc2"
SECURITY_GROUP="default"
REGION="eu-central-1"
AMI_ID="ami-0745b7d4092315796"
VPC_ID="vpc-0ca50faec795884aa"

# Step 1: Create a new EC2 key pair with RSA
aws ec2 create-key-pair \
  --key-name $KEY_NAME \
  --key-type rsa \
  --query 'KeyMaterial' \
  --output text > ${KEY_NAME}.pem

chmod 400 ${KEY_NAME}.pem

echo "Created key pair $KEY_NAME and saved to ${KEY_NAME}.pem"

# Step 2: Create a new VPC
VPC_ID=$(aws ec2 create-vpc \
  --cidr-block $CIDR_BLOCK_VPC \
  --tag-specifications 'ResourceType=vpc,Tags=[{Key=Name,Value='$VPC_NAME'}]' \
  --query 'Vpc.VpcId' \
  --output text --region $REGION)

echo "Created VPC with ID: $VPC_ID"

# Enablsudo usermod -aG docker $USERe DNS support and DNS hostnames for the VPC
aws ec2 modify-vpc-attribute --vpc-id $VPC_ID --enable-dns-support "{\"Value\":true}" --region $REGION
aws ec2 modify-vpc-attribute --vpc-id $VPC_ID --enable-dns-hostnames "{\"Value\":true}" --region $REGION

# Step 3: Create an Internet Gateway
IGW_ID=$(aws ec2 create-internet-gateway \
  --tag-specifications 'ResourceType=internet-gateway,Tags=[{Key=Name,Value='$IGW_NAME'}]' \
  --query 'InternetGateway.InternetGatewayId' \
  --output text --region $REGION)

echo "Created Internet Gateway with ID: $IGW_ID"

# Attach the Internet Gateway to the VPC
aws ec2 attach-internet-gateway --vpc-id $VPC_ID --internet-gateway-id $IGW_ID --region $REGION
echo "Attached Internet Gateway $IGW_ID to VPC $VPC_ID"

# Step 4: Create a Subnet
SUBNET_ID=$(aws ec2 create-subnet \
  --vpc-id $VPC_ID \
  --cidr-block $CIDR_BLOCK_SUBNET \
  --availability-zone "${REGION}a" \
  --tag-specifications 'ResourceType=subnet,Tags=[{Key=Name,Value='$SUBNET_NAME'}]' \
  --query 'Subnet.SubnetId' \
  --output text --region $REGION)

echo "Created Subnet with ID: $SUBNET_ID"

# Step 5: Create a Route Table
ROUTE_TABLE_ID=$(aws ec2 create-route-table \
  --vpc-id $VPC_ID \
  --tag-specifications 'ResourceType=route-table,Tags=[{Key=Name,Value='$ROUTE_TABLE_NAME'}]' \
  --query 'RouteTable.RouteTableId' \
  --output text --region $REGION)

echo "Created Route Table with ID: $ROUTE_TABLE_ID"

# Step 6: Create a Route to the Internet Gateway
aws ec2 create-route \
  --route-table-id $ROUTE_TABLE_ID \
  --destination-cidr-block 0.0.0.0/0 \
  --gateway-id $IGW_ID \
  --region $REGION

echo "Created route 0.0.0.0/0 via Internet Gateway $IGW_ID in Route Table $ROUTE_TABLE_ID"

# Step 7: Associate Route Table with Subnet
aws ec2 associate-route-table \
  --route-table-id $ROUTE_TABLE_ID \
  --subnet-id $SUBNET_ID \
  --region $REGION

echo "Associated Route Table $ROUTE_TABLE_ID with Subnet $SUBNET_ID"

# Step 8: Create Security Group within the new VPC
SECURITY_GROUP_ID=$(aws ec2 create-security-group \
  --group-name $SECURITY_GROUP \
  --description "AIOps Security Group" \
  --vpc-id $VPC_ID \
  --tag-specifications 'ResourceType=security-group,Tags=[{Key=Name,Value='$SECURITY_GROUP'}]' \
  --query 'GroupId' \
  --output text --region $REGION)

echo "Created Security Group with ID: $SECURITY_GROUP_ID"

# Step 9: Add inbound rules to the Security Group
# Allow SSH
aws ec2 authorize-security-group-ingress \
  --group-id $SECURITY_GROUP_ID \
  --protocol tcp \
  --port 22 \
  --cidr 0.0.0.0/0 \
  --region $REGION

# Allow HTTP
aws ec2 authorize-security-group-ingress \
  --group-id $SECURITY_GROUP_ID \
  --protocol tcp \
  --port 80 \
  --cidr 0.0.0.0/0 \
  --region $REGION

# Allow HTTPS
aws ec2 authorize-security-group-ingress \
  --group-id $SECURITY_GROUP_ID \
  --protocol tcp \
  --port 443 \
  --cidr 0.0.0.0/0 \
  --region $REGION

echo "Added inbound rules to Security Group $SECURITY_GROUP_ID"

# Step 10: Launch Rancher Instance
aws ec2 run-instances \
  --image-id $AMI_ID \
  --count 1 \
  --instance-type t3.large \
  --key-name $KEY_NAME \
  --security-group-ids $SECURITY_GROUP_ID \
  --subnet-id $SUBNET_ID \
  --block-device-mappings DeviceName=/dev/sda1,Ebs={VolumeSize=30,VolumeType=gp2} \
  --tag-specifications 'ResourceType=instance,Tags=[{Key=Name,Value=Rancher}]' \
  --region $REGION

echo "Launched Rancher Instance in Subnet $SUBNET_ID"

# Step 11: Launch Kubernetes Instance
aws ec2 run-instances \
  --image-id $AMI_ID \
  --count 1 \
  --instance-type t3.xlarge \
  --key-name $KEY_NAME \
  --security-group-ids $SECURITY_GROUP_ID \
  --subnet-id $SUBNET_ID \
  --block-device-mappings DeviceName=/dev/sda1,Ebs={VolumeSize=50,VolumeType=gp2} \
  --tag-specifications 'ResourceType=instance,Tags=[{Key=Name,Value=Kubernetes}]' \
  --region $REGION

echo "Launched Kubernetes Instance in Subnet $SUBNET_ID"

# Step 12: Launch Ollama Instance
aws ec2 run-instances \
  --image-id $AMI_ID \
  --count 1 \
  --instance-type c5.2xlarge \
  --key-name $KEY_NAME \
  --security-group-ids $SECURITY_GROUP_ID \
  --subnet-id $SUBNET_ID \
  --block-device-mappings DeviceName=/dev/sda1,Ebs={VolumeSize=200,VolumeType=gp2} \
  --tag-specifications 'ResourceType=instance,Tags=[{Key=Name,Value=Ollama}]' \
  --region $REGION

echo "Launched Ollama Instance in Subnet $SUBNET_ID"